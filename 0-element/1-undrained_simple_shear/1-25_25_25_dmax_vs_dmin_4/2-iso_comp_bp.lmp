#********************************************************************************#
# @Author : Ming Yang
# @Email  : ykevin09@gmail.com
# @Date   : 2021-01-06
# @Last Modified by     : Ming Yang
# @Lost Modified Time   : 2021-05-15
# @Function  : Isotropic compression in bi-periodic cell via servo control
#       1. Servo-control for top & bottom mesh plates
#       2. Servo-control for lateral periodic boundary conditions
#       3. Isotropic Compression until p=20kPa
# @Reference : 
#********************************************************************************#
###Initialization
#preliminaries
units           si
atom_style      granular
atom_modify     map array
boundary        m m m
newton          off
communicate     single vel yes
#declare computation domain
read_restart    restart/consol_1_10kPa.equil
#neighbor listing
neighbor        0.0001 bin
neigh_modify    delay 0 #every 100

###Setup
#material and interaction properties required
variable 	    atomEY equal 7.0e10 #1GP=1e9Pa
variable 	    atomPO equal 0.25
variable 	    atomCOR equal 0.8
variable        atomCOF equal 0.05
variable        atomWallCOF equal 0.0
variable        atomCORF equal 0.1
variable        atomWallCORF equal 0.0
variable        atomCORVD equal 0.13
variable 	    atomRS equal 2.25
hard_particles  yes
fix             mEY all property/global youngsModulus peratomtype ${atomEY} ${atomEY} 
fix             mPO all property/global poissonsRatio peratomtype ${atomPO} ${atomPO}
fix             mCOR all property/global coefficientRestitution peratomtypepair 2 ${atomCOR} ${atomCOR} ${atomCOR} ${atomCOR}
fix             mCOF all property/global coefficientFriction peratomtypepair 2 ${atomCOF} ${atomWallCOF} ${atomWallCOF} ${atomWallCOF}
fix             mCORF all property/global coefficientRollingFriction peratomtypepair 2 ${atomCORF} ${atomWallCORF} ${atomWallCORF} ${atomWallCORF}
fix             mCORVD all property/global coefficientRollingViscousDamping peratomtypepair 2 ${atomCORVD} ${atomCORVD} ${atomCORVD} ${atomCORVD}
fix             mRS all property/global rollingStiffness scalar ${atomRS}
#
#initial positions of servo walls
variable        xl0 equal -0.00024
variable        yl0 equal -0.00024 
variable        zl0 equal -0.00024
variable        xh0 equal 0.01132 
variable        yh0 equal 0.01132
variable        zh0 equal 0.01132
variable        xa0 equal 0.5*(${xl0}+${xh0})
variable        ya0 equal 0.5*(${yl0}+${yh0})
variable        za0 equal 0.5*(${zl0}+${zh0})
variable        mslx0 equal ${xh0}-${xl0}
variable        msly0 equal ${yh0}-${yl0}
variable        mslz0 equal ${zh0}-${zl0}
variable        SCALE0 equal 1.00
#
variable        servoForce equal 0.001
variable        servoVmax equal 0.2
variable        servoKp equal 0.1
variable        servoKi equal 0.0
variable        servoKd equal 0.0
variable        servoRatio equal 0.01
variable        mslx1 equal ${xh0}-${xl0}
variable        msly1 equal ${yh0}-${yl0}
variable        mslz1 equal ${zh0}-${zl0}
variable        msltmp equal (${mslx1}>=${msly1})*${mslx1}+(${mslx1}<${msly1})*${msly1}
variable        msl1 equal (${msltmp}>=${mslz1})*${msltmp}+(${msltmp}<${mslz1})*${mslz1}
variable        servoScale equal 1.0
fix             sxlwall1 all mesh/surface/stress/servo file input/mesh/plane.stl type 2 scale ${servoScale} &
                    rotate axis 0 1 0 angle 90 move ${xl0} ${ya0} ${za0} com ${xl0} ${ya0} ${za0} &
                    ctrlPV force axis +1 0 0 target_val ${servoForce} vel_max ${servoVmax} &
                    kp ${servoKp} ki ${servoKi} kd ${servoKd}
fix             sxhwall1 all mesh/surface/stress/servo file input/mesh/plane.stl type 2 scale ${servoScale} &
                    rotate axis 0 1 0 angle 90 move ${xh0} ${ya0} ${za0} com ${xh0} ${ya0} ${za0} &
                    ctrlPV force axis -1 0 0 target_val ${servoForce} vel_max ${servoVmax} &
                    kp ${servoKp} ki ${servoKi} kd ${servoKd}
fix             sylwall1 all mesh/surface/stress/servo file input/mesh/plane.stl type 2 scale ${servoScale} &
                    rotate axis 1 0 0 angle 90 move ${xa0} ${yl0} ${za0} com ${xa0} ${yl0} ${za0} &
                    ctrlPV force axis 0 +1 0 target_val ${servoForce} vel_max ${servoVmax} &
                    kp ${servoKp} ki ${servoKi} kd ${servoKd}
fix             syhwall1 all mesh/surface/stress/servo file input/mesh/plane.stl type 2 scale ${servoScale} &
                    rotate axis 1 0 0 angle 90 move ${xa0} ${yh0} ${za0} com ${xa0} ${yh0} ${za0} &
                    ctrlPV force axis 0 -1 0 target_val ${servoForce} vel_max ${servoVmax} &
                    kp ${servoKp} ki ${servoKi} kd ${servoKd}
fix             szlwall1 all mesh/surface/stress/servo file input/mesh/plane.stl type 2 scale ${servoScale} &
                    move ${xa0} ${ya0} ${zl0} com ${xa0} ${ya0} ${zl0} ctrlPV force axis 0 0 +1 &
                    target_val ${servoForce} vel_max ${servoVmax} kp ${servoKp} ki ${servoKi} kd ${servoKd}
fix             szhwall1 all mesh/surface/stress/servo file input/mesh/plane.stl type 2 scale ${servoScale} &
                    move ${xa0} ${ya0} ${zh0} com ${xa0} ${ya0} ${zh0} ctrlPV force axis 0 0 -1 & 
                    target_val ${servoForce} vel_max ${servoVmax} kp ${servoKp} ki ${servoKi} kd ${servoKd}
fix             swalls1 all wall/gran model hertz tangential no_history mesh n_meshes 6 &
                    meshes sxlwall1 sylwall1 szlwall1 sxhwall1 syhwall1 szhwall1
#
variable        tmp equal f_sxlwall1[7]
variable        xl2 equal ${tmp}
variable        tmp equal f_sxhwall1[7]
variable        xh2 equal ${tmp}
variable        tmp equal f_sylwall1[8]
variable        yl2 equal ${tmp}
variable        tmp equal f_syhwall1[8]
variable        yh2 equal ${tmp}
variable        tmp equal f_szlwall1[9]
variable        zl2 equal ${tmp}
variable        tmp equal f_szhwall1[9]
variable        zh2 equal ${tmp}
variable        sw2Axy equal lx*ly
variable        targetP0 equal 0.2e5
variable        targetK0 equal 1.0
variable        szzTarget equal 3*${targetP0}/(1+2*${targetK0})
variable        sxxTarget equal ${targetK0}*${szzTarget}
variable        syyTarget equal ${targetK0}*${szzTarget}
variable        sw2fxy equal ${szzTarget}*v_sw2Axy
#
unfix           swalls1
unfix           sxlwall1
unfix           sxhwall1
unfix           sylwall1
unfix           syhwall1
unfix           szlwall1
unfix           szhwall1
#
variable        xa2 equal 0.5*(${xl2}+${xh2})
variable        ya2 equal 0.5*(${yl2}+${yh2})
variable        za2 equal 0.5*(${zl2}+${zh2})
variable        mslx2 equal ${xh2}-${xl2}
variable        msly2 equal ${yh2}-${yl2}
variable        msl2 equal (${mslx2}>=${msly2})*${mslx2}+(${mslx2}<${msly2})*${msly2}
variable        servoScale equal ${mslx2}/${mslz0}
#
fix             szlwall2 all mesh/surface/stress/servo file input/mesh/plane.stl type 2 scale ${servoScale} &
                    move ${xa2} ${ya2} ${zl2} com ${xa2} ${ya2} ${zl2} ctrlPV force axis 0 0 +1 &
                    target_val ${servoForce} vel_max ${servoVmax} kp ${servoKp} ki ${servoKi} kd ${servoKd}
fix             szhwall2 all mesh/surface/stress/servo file input/mesh/plane.stl type 2 scale ${servoScale} &
                    move ${xa2} ${ya2} ${zh2} com ${xa2} ${ya2} ${zh2} ctrlPV force axis 0 0 -1 & 
                    target_val ${servoForce} vel_max ${servoVmax} kp ${servoKp} ki ${servoKi} kd ${servoKd}
fix             swalls2 all wall/gran model hertz tangential no_history mesh n_meshes 2 &
                    meshes szlwall2 szhwall2

fix_modify      szlwall2 servo/target_val v_sw2fxy
fix_modify      szhwall2 servo/target_val v_sw2fxy
variable        szlw29 equal f_szlwall2[9]
variable        szhw29 equal f_szhwall2[9]
variable        bvol equal lx*ly*(v_szhw29-v_szlw29) #Sample volume
#
#define the physics
pair_style      gran model hertz tangential history rolling_friction epsd3&
                   limitForce on torsionTorque on 
pair_coeff      * *
#
variable        conRatio equal 0.05
variable        zTop equal (${zh2}-${conRatio}*(${zh2}-${zl2}))
region          regTop block ${xl2} ${xh2} ${yl2} ${yh2} ${zTop} ${zh2}
group           topLayer region regTop
variable        zBot equal (${zl2}+${conRatio}*(${zh2}-${zl2}))
region          regBot block ${xl2} ${xh2} ${yl2} ${yh2} ${zl2} ${zBot}
group           botLayer region regBot
group           atomAll type 1
group           midGroup subtract atomAll topLayer botLayer
#probReg
variable        probRatio equal 0.075
variable        probZt equal (${zh2}-${probRatio}*(${zh2}-${zl2}))
variable        probZb equal (${zl2}+${probRatio}*(${zh2}-${zl2}))
#
###Detailed settings
#integrator
fix             integr all nve/sphere
#timestep
timestep        2.0e-9
fix             ctg all check/timestep/gran 1000 0.05 0.05
###Execution and further settings
variable        hstep equal 10000
#atom property and stress
compute         atomProp all property/atom mass diameter z vx vy vz fx fy fz tqx tqy tqz
compute         atomDmin all reduce min c_atomProp[2]
variable        aDmin equal c_atomDmin
variable        atomV atom c_atomProp[4]^2+c_atomProp[5]^2+c_atomProp[6]^2
compute         atomVmax all reduce max v_atomV
variable        aVmax equal sqrt(c_atomVmax)
variable        atomF atom c_atomProp[7]^2+c_atomProp[8]^2+c_atomProp[9]^2
compute         atomFmax all reduce max v_atomF
variable        aFmax equal sqrt(c_atomFmax)
variable        atomT atom c_atomProp[10]^2+c_atomProp[11]^2+c_atomProp[12]^2
compute         atomTmax all reduce max v_atomT
variable        aTmax equal sqrt(c_atomTmax)
variable        atomEk atom 0.5*c_atomProp[1]*(c_atomProp[4]^2+c_atomProp[5]^2+c_atomProp[6]^2)
compute         atomEkmax all reduce max v_atomEk
variable        aEkmax equal c_atomEkmax
#
#homogenization based on the whole volume
compute         atomStress all stress/atom virial
compute         bvolStress all reduce sum c_atomStress[1] c_atomStress[2] c_atomStress[3]&
                                          c_atomStress[4] c_atomStress[5] c_atomStress[6]
variable        pBvol equal -(c_bvolStress[1]+c_bvolStress[2]+c_bvolStress[3])/3/v_bvol
variable        sxxBvol equal -(c_bvolStress[1])/v_bvol
variable        syyBvol equal -(c_bvolStress[2])/v_bvol
variable        szzBvol equal -(c_bvolStress[3])/v_bvol
variable        sxyBvol equal (c_bvolStress[4])/v_bvol
variable        sxzBvol equal (c_bvolStress[5])/v_bvol
variable        syzBvol equal (c_bvolStress[6])/v_bvol
variable        volMass equal mass(atomAll)/2650.0
variable        eBvol equal (v_bvol-v_volMass)/v_volMass
#
#homogenization based on the whole volume based on probReg:
variable        probVol equal lx*ly*(v_probZt-v_probZb) #probReg volume
variable        conPi equal 4*PI/3
variable        atomR atom 0.5*c_atomProp[2]
variable        atomProbTop atom (c_atomProp[3]+v_atomR-v_probZt)
variable        atomProbBot atom (v_probZb-c_atomProp[3]+v_atomR)
variable        atomIsIn atom (v_atomProbTop<=0)&&(v_atomProbBot<=0)
variable        atomIsCrossTop atom (v_atomProbTop>0)&&(c_atomProp[3]-v_atomR-v_probZt<0)
variable        atomIsCrossBot atom (v_atomProbBot>0)&&(v_probZb-c_atomProp[3]-v_atomR<0)
variable        atomIsNot atom (c_atomProp[3]-v_atomR-v_probZt>=0)||(v_probZb-c_atomProp[3]-v_atomR>=0)
variable        atomProbVol atom v_conPi*v_atomIsIn*(v_atomR^3)+&
v_conPi*v_atomIsCrossTop*(v_atomR^3-1/4*v_atomProbTop^2*(3*v_atomR-v_atomProbTop))+&
v_conPi*v_atomIsCrossBot*(v_atomR^3-1/4*v_atomProbBot^2*(3*v_atomR-v_atomProbBot))+&
v_conPi*v_atomIsNot*0
variable        atomVol atom v_conPi*v_atomR*v_atomR*v_atomR
variable        atomProbSxx atom v_atomProbVol/v_atomVol*c_atomStress[1]
variable        atomProbSyy atom v_atomProbVol/v_atomVol*c_atomStress[2]
variable        atomProbSzz atom v_atomProbVol/v_atomVol*c_atomStress[3]
variable        atomProbSxy atom v_atomProbVol/v_atomVol*c_atomStress[4]
variable        atomProbSxz atom v_atomProbVol/v_atomVol*c_atomStress[5]
variable        atomProbSyz atom v_atomProbVol/v_atomVol*c_atomStress[6]
compute         probStress all reduce sum v_atomProbSxx v_atomProbSyy v_atomProbSzz&
                                          v_atomProbSxy v_atomProbSxz v_atomProbSyz
variable        pProb equal -(c_probStress[1]+c_probStress[2]+c_probStress[3])/3/v_probVol
variable        sxxProb equal -(c_probStress[1])/v_probVol
variable        syyProb equal -(c_probStress[2])/v_probVol
variable        szzProb equal -(c_probStress[3])/v_probVol
variable        sxyProb equal (c_probStress[4])/v_probVol
variable        sxzProb equal (c_probStress[5])/v_probVol
variable        syzProb equal (c_probStress[6])/v_probVol
compute         solidProbVol all reduce sum v_atomProbVol
variable        eProb equal (v_probVol-c_solidProbVol)/c_solidProbVol
#
#
compute         eng all ke
variable        oke equal c_eng
#
#particle-particle and particle-wall contact info
#compute         pp all pair/gran/local pos id force force_normal force_tangential delta
#compute         pw all wall/gran/local pos id force force_normal force_tangential delta
#history
#dump            dpp all local ${hstep} output/2-comp/contact/ppcontact-*.dat &
#                    c_pp[1] c_pp[2] c_pp[3] &
#                    c_pp[4] c_pp[5] c_pp[6] c_pp[7] c_pp[8] c_pp[9] & 
#                    c_pp[10] c_pp[11] c_pp[12] &
#                    c_pp[13] c_pp[14] c_pp[15] &
#                    c_pp[16] c_pp[17] c_pp[18] &
#                    c_pp[19]
#dump            dpw all local ${hstep} output/2-comp/contact/pwcontact-*.dat & 
#                    c_pw[1] c_pw[2] c_pw[3] & 
#                    c_pw[4] c_pw[5] c_pw[6] c_pw[7] c_pw[8] c_pw[9] &
#                    c_pw[10] c_pw[11] c_pw[12] &
#                    c_pw[13] c_pw[14] c_pw[15] &
#                    c_pw[16] c_pw[17] c_pw[18] &
#                    c_pw[19]
#
#state
variable        ostep equal step
variable        xl equal xlo
variable        xh equal xhi
variable        yl equal ylo
variable        yh equal yhi
variable        szhw2Sxz equal f_szhwall2[1]/(lx*ly)
variable        szhw2Syz equal f_szhwall2[2]/(lx*ly)
variable        szhw2Szz equal f_szhwall2[3]/(lx*ly)
variable        szlw2Sxz equal f_szlwall2[1]/(lx*ly)
variable        szlw2Syz equal f_szlwall2[2]/(lx*ly)
variable        szlw2Szz equal f_szlwall2[3]/(lx*ly)
#
#variable for compression: quasi-static
variable        Imax equal 1.0e-3
variable        rho equal 2650.0
variable        pMin equal 0.01e5
variable        pI equal (v_pProb>=${pMin})*v_pProb+(v_pProb<${pMin})*${pMin}
variable        dezz equal ${Imax}/v_aDmin*sqrt(v_pI/${rho})
variable        vzMax equal v_dezz*(${szhw29}-${szlw29}) #compression
#
variable        alpha equal 1.0
variable        h0 equal (v_szhw29-v_szlw29) 
variable        kppx equal ${alpha}*${servoKp}*ly*v_h0
variable        kppy equal ${alpha}*${servoKp}*lx*v_h0
variable        velx0 equal -v_kppx*(${sxxTarget}-v_sxxProb)
variable        vely0 equal -v_kppy*(${syyTarget}-v_syyProb)
variable        velz0 equal -${servoKp}*(lx*ly)*(${szzTarget}-v_szhw2Szz)
variable        isVx equal abs(v_velx0)<${servoVmax}
variable        isVy equal abs(v_vely0)<${servoVmax}
variable        isVz equal abs(v_velz0)<${servoVmax}
variable        velx equal v_isVx*v_velx0+(1-v_isVx)*${servoVmax}*v_velx0/abs(v_velx0)
variable        vely equal v_isVy*v_vely0+(1-v_isVy)*${servoVmax}*v_vely0/abs(v_vely0)
variable        velz equal v_isVz*v_velz0+(1-v_isVz)*${servoVmax}*v_velz0/abs(v_velz0)
#
#practical equilibrium condition
variable        tolF1 equal v_pProb*v_aDmin*v_aDmin
variable        aFtol equal 1e-4*v_tolF1
variable        aTtol equal 1e-4*v_tolF1*v_aDmin
variable        aEktol equal 1e-8*v_tolF1*v_aDmin
variable        isEqSxx equal abs(${sxxTarget}-v_sxxProb)/${sxxTarget}<1e-4
variable        isEqSyy equal abs(${syyTarget}-v_syyProb)/${syyTarget}<1e-4
variable        isEqSzz equal abs(${szzTarget}-v_szzProb)/${szzTarget}<1e-4
variable        isEqForce equal v_aFmax<v_aFtol
variable        isEqTorque equal v_aTmax<v_aTtol
variable        isEqEk equal v_aEkmax<v_aEktol
variable        isEq equal v_isEqSxx*v_isEqSyy*v_isEqSzz*v_isEqForce*v_isEqTorque*v_isEqEk
variable        eBvoltol equal 1e-8
#
#variable for running
variable        totalStep equal 1e8
variable        loopStep equal 1000
variable        loopCountMax equal floor(${totalStep}/${loopStep})
variable        loopCount loop ${loopCountMax}
#
shell           mkdir output
shell           mkdir output/2-comp
shell           mkdir output/2-comp/visualization
#
print           "N ke bvol eBvol eProb&
 xl yl zl xh yh zh&
 sxxProb syyProb szzProb sxyProb sxzProb syzProb&
 sxzTopWall syzTopWall szzTopWall sxyBotWall sxzBotWall syzBotWall" &
    file output/2-comp/macro.txt screen no
#
print           "N aFmax aFtol aTmax aTtol aEkmax aEktol" &
    file output/2-comp/check.txt screen no
#
fix             macroOutput all print ${hstep} &
                    "${ostep} ${oke} ${bvol} ${eBvol} ${eProb}& 
 ${xl} ${yl} ${szlw29} ${xh} ${yh} ${szhw29}&
 ${sxxProb} ${syyProb} ${szzProb} ${sxyProb} ${sxzProb} ${syzProb}&
 ${szhw2Sxz} ${szhw2Syz} ${szhw2Szz} ${szlw2Sxz} ${szlw2Syz} ${szlw2Szz}" &
                    append output/2-comp/macro.txt screen no title none
#
fix             checkOutput all print ${hstep} &
                    "${ostep} ${aFmax} ${aFtol} ${aTmax} ${aTtol} ${aEkmax} ${aEktol}" &
                    append output/2-comp/check.txt screen no title none
#
# #visualization
# dump            dmpMesh all mesh/vtk ${hstep} output/2-comp/visualization/wall-*.vtp stress wear
# dump            dmp all custom/vtk ${hstep} output/2-comp/visualization/particle-*.vtp id type type &
#                    x y z ix iy iz vx vy vz fx fy fz omegax omegay omegaz radius
#
#thermodynamic output settings
thermo_style    custom step v_oke v_eBvol v_eProb v_szzProb v_szhw2Szz &
                            v_velx v_vely v_velz v_isEq
thermo          ${hstep}
thermo_modify   lost warn norm no
###Run
#velocity        atomAll set 0. 0. 0.
run             0
#
print           "${ostep} ${oke} ${bvol} ${eBvol} ${eProb}& 
 ${xl} ${yl} ${szlw29} ${xh} ${yh} ${szhw29}&
 ${sxxProb} ${syyProb} ${szzProb} ${sxyProb} ${sxzProb} ${syzProb}&
 ${szhw2Sxz} ${szhw2Syz} ${szhw2Szz} ${szlw2Sxz} ${szlw2Syz} ${szlw2Szz}" &
    append output/2-comp/macro.txt screen no
#
print            "${ostep} ${aFmax} ${aFtol} ${aTmax} ${aTtol} ${aEkmax} ${aEktol}" &
    append output/2-comp/check.txt screen no
#
change_box      all x final ${xl2} ${xh2} y final ${yl2} ${yh2} z final ${zl2} ${zh2} boundary p p m
#Servo bi-periodic for 20kPa
label           loop
variable        eBvol0 equal ${eBvol}
fix             comp all deform 1 x vel ${velx} y vel ${vely}
run             ${loopStep}
variable        deBvol equal abs(${eBvol}-${eBvol0})
#if              "${deBvol} < ${eBvoltol}" then quit
#print           "${deBvol}"
next            loopCount
jump            2-iso_comp_bp.lmp loop

write_restart   restart/consol_2_20kPa.equil

